#!/usr/bin/env node


const http = require('http');

const { app } = require('../server');

const { APP_PORT } = require('../constants');
const READINESS_PROBE_DELAY = 1000;

const server = http.createServer(app);
server.listen(APP_PORT);
server.on('error', onError);
server.on('listening', () => {
    onListening(server.address());
});

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof APP_PORT === 'string'
        ? 'Pipe ' + APP_PORT
        : 'Port ' + APP_PORT;

    const errorCode = error.code;
    if (errorCode === 'EACCES') {
        console.error(bind + ' requires elevated privileges.');
        process.exit(1);
    } else if (errorCode === 'EADDRINUSE') {
        console.error(bind + ' is already in use.');
        process.exit(1);
    } else {
        throw error;
    }
}

function onListening(address) {
    const bind = typeof address === 'string'
        ? 'pipe ' + address
        : 'port ' + address.port;
    console.log('WebApp Server listening on ' + bind);
}

process.once('SIGINT', () => {
    doShutdown('SIGINT');
});

process.once('SIGTERM', () => {
    doShutdown('SIGTERM');
});

function doShutdown(signal) {
    const dtNow = new Date().toISOString();
    console.log(`${signal}, WebApp Server Graceful shutdown started at ${dtNow}`);
    setTimeout(shutdown, READINESS_PROBE_DELAY);
}

function shutdown() {
    server.close((err) => {
        if (err) {
            console.error(err);
            process.exit(1);
        }

        // If there are any resources close them
        closeResources((resErr) => {
            // error handling
            if (resErr) {
                console.error(resErr);
                process.exit(1);
            }

            process.exit(0);
        });
    });
}

function closeResources(callback) {
    const err = null;
    callback(err);
}
